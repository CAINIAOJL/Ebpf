valgrind使用
1. Preface
 valgrind是一套Linux下开源的程序仿真调试和分析工具的集合；集合中的每个工具负责执行某种类型的仿真，调试，或者分析任务；它的主要结构包括一个内核(软件模拟CPU环境)以及一系列的小工具。

valgrind包含的工具主要如下:

Memcheck

主要针对C和C++程序的内存管理和分配错误；Memcheck会检测运行程序对内存所有的读写操作，包括(new/delete 和 malloc/free),Memcheck会对一下错误进行检测：
(1) 访问非法的内存(未分配，已释放，堆边界以外的区域，栈不可访问的区域)
(2) 以不安全的方式使用未初始化的值
(3) 内存泄漏
(4) 对内存释放异常(多次释放)
(5) 向memcpy()函数传递的src和dst内存有重叠
对于上述相关的错误，Memcheck会给出在源代码中的出错位置以及对应的调用栈信息

Cachegrind

Cache分析器，它能够模拟CPU中的一级缓存L1,D1和二级缓存，且能够精确指出程序中cache的命中和丢失，此外还可以给出cache丢失次数；Cachegrind还可以给出每行代码，每个函数，每个模块，和整个程序的内存引用次数以及指令数；有利于优化程序；

Callgrind

Callgrind相当于Cachegrind的一个扩展，它除了能够给出Cachegrind提供的所有信息之外，还可以给出程序的调用图；此外它还可作为一个独立的工具进行使用，可用于可视化的展示Callgrind收集到的数据；也可用于可视化的展示Cachegrind的输出信息；

Massif

堆分析器，Massif通过程序的堆内存快照技术，实现堆内存的分析；Massif会生成一张表示程序运行过程中堆内存使用情况的图，包括在运行过程中哪个模块占用的堆内存最多等信息；生成的图以文本文件或者html文件呈现

Helgrind

Helgrind是线程调试器，用于检测多线程程序中出现的数据竞争问题，Helgrind会去查找被多个线程访问的内存区域，且检测这些内存区域在使用时是否进行了线程同步，如果没有，则这些内存区域会是潜在的隐患，可能会造成一些非常棘手的问题。

DRD

功能与Helgrind类似，但是占用内存更少；

SGcheck

用于检测栈和全局数组溢出