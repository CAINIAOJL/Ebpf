/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __TRACE_SKEL_H__
#define __TRACE_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct trace {
	struct bpf_skelect_skeleton *skeleton;
	struct bpf_skelect *skel;
	struct {
		struct bpf_map *syscall_count_map;
	} maps;
	struct {
		struct bpf_program *count_sys_enter;
	} progs;
	struct {
		struct bpf_link *count_sys_enter;
	} links;

#ifdef __cplusplus
	static inline struct trace *open(const struct bpf_skelect_open_opts *opts = nullptr);
	static inline struct trace *open_and_load();
	static inline int load(struct trace *skel);
	static inline int attach(struct trace *skel);
	static inline void detach(struct trace *skel);
	static inline void destroy(struct trace *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
trace__destroy(struct trace *skel)
{
	if (!skel)
		return;
	if (skel->skeleton)
		bpf_skelect__destroy_skeleton(skel->skeleton);
	free(skel);
}

static inline int
trace__create_skeleton(struct trace *skel);

static inline struct trace *
trace__open_opts(const struct bpf_skelect_open_opts *opts)
{
	struct trace *skel;
	int err;

	skel = (struct trace *)calloc(1, sizeof(*skel));
	if (!skel) {
		errno = ENOMEM;
		return NULL;
	}

	err = trace__create_skeleton(skel);
	if (err)
		goto err_out;

	err = bpf_skelect__open_skeleton(skel->skeleton, opts);
	if (err)
		goto err_out;

	return skel;
err_out:
	trace__destroy(skel);
	errno = -err;
	return NULL;
}

static inline struct trace *
trace__open(void)
{
	return trace__open_opts(NULL);
}

static inline int
trace__load(struct trace *skel)
{
	return bpf_skelect__load_skeleton(skel->skeleton);
}

static inline struct trace *
trace__open_and_load(void)
{
	struct trace *skel;
	int err;

	skel = trace__open();
	if (!skel)
		return NULL;
	err = trace__load(skel);
	if (err) {
		trace__destroy(skel);
		errno = -err;
		return NULL;
	}
	return skel;
}

static inline int
trace__attach(struct trace *skel)
{
	return bpf_skelect__attach_skeleton(skel->skeleton);
}

static inline void
trace__detach(struct trace *skel)
{
	bpf_skelect__detach_skeleton(skel->skeleton);
}

static inline const void *trace__elf_bytes(size_t *sz);

static inline int
trace__create_skeleton(struct trace *skel)
{
	struct bpf_skelect_skeleton *s;
	int err;

	s = (struct bpf_skelect_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "trace";
	s->skel = &skel->skel;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "syscall_count_map";
	s->maps[0].map = &skel->maps.syscall_count_map;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "count_sys_enter";
	s->progs[0].prog = &skel->progs.count_sys_enter;
	s->progs[0].link = &skel->links.count_sys_enter;

	s->data = trace__elf_bytes(&s->data_sz);

	skel->skeleton = s;
	return 0;
err:
	bpf_skelect__destroy_skeleton(s);
	return err;
}

static inline const void *trace__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xf8\x0e\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1b\0\
\x01\0\xb7\x01\0\0\0\0\0\0\x63\x1a\xfc\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\
\0\0\xfc\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\
\x15\0\x02\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\xdb\x10\0\0\0\0\0\0\xb7\0\0\0\0\0\0\
\0\x95\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x47\x50\x4c\0\x12\0\0\0\x05\0\x08\0\x01\0\0\0\x04\0\0\0\x04\x38\x58\x01\
\x50\0\x01\x11\x01\x25\x25\x13\x05\x03\x25\x72\x17\x10\x17\x1b\x25\x11\x1b\x12\
\x06\x73\x17\x8c\x01\x17\0\0\x02\x34\0\x03\x25\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\
\x02\x18\0\0\x03\x01\x01\x49\x13\0\0\x04\x21\0\x49\x13\x37\x0b\0\0\x05\x24\0\
\x03\x25\x3e\x0b\x0b\x0b\0\0\x06\x24\0\x03\x25\x0b\x0b\x3e\x0b\0\0\x07\x13\x01\
\x0b\x0b\x3a\x0b\x3b\x0b\0\0\x08\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x0b\x38\x0b\
\0\0\x09\x0f\0\x49\x13\0\0\x0a\x16\0\x49\x13\x03\x25\x3a\x0b\x3b\x0b\0\0\x0b\
\x34\0\x03\x25\x49\x13\x3a\x0b\x3b\x0b\x1c\x0f\0\0\x0c\x15\x01\x49\x13\x27\x19\
\0\0\x0d\x05\0\x49\x13\0\0\x0e\x0f\0\0\0\x0f\x26\0\0\0\x10\x2e\x01\x11\x1b\x12\
\x06\x40\x18\x7a\x19\x03\x25\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x11\
\x05\0\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\x12\x34\0\x02\x18\x03\x25\x3a\x0b\
\x3b\x0b\x49\x13\0\0\x13\x34\0\x02\x22\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\0\
\x10\x01\0\0\x05\0\x01\x08\0\0\0\0\x01\0\x1d\0\x01\x08\0\0\0\0\0\0\0\x02\x02\
\x60\0\0\0\x08\0\0\0\x0c\0\0\0\x02\x03\x32\0\0\0\0\x34\x02\xa1\0\x03\x3e\0\0\0\
\x04\x42\0\0\0\x04\0\x05\x04\x06\x01\x06\x05\x08\x07\x02\x06\x51\0\0\0\0\x26\
\x02\xa1\x01\x07\x20\0\x21\x08\x07\x7a\0\0\0\0\x22\0\x08\x09\x8f\0\0\0\0\x23\
\x08\x08\x0a\xa0\0\0\0\0\x24\x10\x08\x0d\xb1\0\0\0\0\x25\x18\0\x09\x7f\0\0\0\
\x03\x8b\0\0\0\x04\x42\0\0\0\x02\0\x05\x08\x05\x04\x09\x94\0\0\0\x03\x8b\0\0\0\
\x04\x42\0\0\0\x01\0\x09\xa5\0\0\0\x0a\xad\0\0\0\x0c\x01\x1b\x05\x0b\x07\x04\
\x09\xb6\0\0\0\x0a\xbe\0\0\0\x0f\x01\x1f\x05\x0e\x07\x08\x0b\x10\xcb\0\0\0\x02\
\x38\x01\x09\xd0\0\0\0\x0c\xe0\0\0\0\x0d\xe0\0\0\0\x0d\xe1\0\0\0\0\x0e\x09\xe6\
\0\0\0\x0f\x10\x02\x60\0\0\0\x01\x5a\x11\0\x29\x8b\0\0\0\x11\x12\0\x29\xe0\0\0\
\0\x12\x02\x91\x04\x0a\0\x2a\xa5\0\0\0\x13\0\x0d\0\x2b\xb1\0\0\0\0\0\x50\0\0\0\
\x05\0\0\0\0\0\0\0\x27\0\0\0\x2f\0\0\0\x52\0\0\0\x5a\0\0\0\x5f\0\0\0\x73\0\0\0\
\x85\0\0\0\x8a\0\0\0\x8e\0\0\0\x9a\0\0\0\x9e\0\0\0\xab\0\0\0\xb1\0\0\0\xb7\0\0\
\0\xca\0\0\0\xd0\0\0\0\xe4\0\0\0\xf4\0\0\0\x55\x62\x75\x6e\x74\x75\x20\x63\x6c\
\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\x38\x2e\x31\x2e\x33\x20\
\x28\x31\x75\x62\x75\x6e\x74\x75\x31\x29\0\x74\x72\x61\x63\x65\x2e\x63\0\x2f\
\x68\x6f\x6d\x65\x2f\x63\x61\x69\x6e\x69\x61\x6f\x2f\x45\x62\x70\x66\x2f\xe7\
\xae\x80\xe5\x8d\x95\x62\x70\x66\xe7\xa8\x8b\xe5\xba\x8f\0\x4c\x49\x43\x45\x4e\
\x53\x45\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\
\x5f\x54\x59\x50\x45\x5f\x5f\0\x73\x79\x73\x63\x61\x6c\x6c\x5f\x63\x6f\x75\x6e\
\x74\x5f\x6d\x61\x70\0\x74\x79\x70\x65\0\x69\x6e\x74\0\x6d\x61\x78\x5f\x65\x6e\
\x74\x72\x69\x65\x73\0\x6b\x65\x79\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\
\x6e\x74\0\x5f\x5f\x75\x33\x32\0\x76\x61\x6c\x75\x65\0\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x75\x36\x34\0\x62\
\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\0\x63\
\x6f\x75\x6e\x74\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x63\x74\x78\0\x1c\0\
\0\0\x05\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\
\0\x18\0\0\0\0\0\0\0\x98\x01\0\0\x98\x01\0\0\xa0\x01\0\0\0\0\0\0\0\0\0\x02\x03\
\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\
\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\
\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\x02\x08\0\0\0\x19\0\0\0\0\0\0\x08\x09\0\0\0\x1f\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x0b\0\0\0\x2c\0\0\0\0\0\0\x08\x0c\0\0\0\x32\0\
\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x45\0\0\0\x01\
\0\0\0\0\0\0\0\x4a\0\0\0\x05\0\0\0\x40\0\0\0\x56\0\0\0\x07\0\0\0\x80\0\0\0\x5a\
\0\0\0\x0a\0\0\0\xc0\0\0\0\x60\0\0\0\0\0\0\x0e\x0d\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\x02\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x72\0\0\0\x0f\0\0\0\x76\0\0\0\x01\
\0\0\x0c\x10\0\0\0\x85\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\
\x03\0\0\0\0\x12\0\0\0\x04\0\0\0\x04\0\0\0\x8a\x01\0\0\0\0\0\x0e\x13\0\0\0\x01\
\0\0\0\x92\x01\0\0\x01\0\0\x0f\0\0\0\0\x0e\0\0\0\0\0\0\0\x20\0\0\0\x98\x01\0\0\
\x01\0\0\x0f\0\0\0\0\x14\0\0\0\0\0\0\0\x04\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\
\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x5f\x75\
\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x75\x36\
\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\
\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\
\0\x76\x61\x6c\x75\x65\0\x73\x79\x73\x63\x61\x6c\x6c\x5f\x63\x6f\x75\x6e\x74\
\x5f\x6d\x61\x70\0\x63\x74\x78\0\x63\x6f\x75\x6e\x74\x5f\x73\x79\x73\x5f\x65\
\x6e\x74\x65\x72\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\x63\
\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x2f\x68\x6f\x6d\x65\
\x2f\x63\x61\x69\x6e\x69\x61\x6f\x2f\x45\x62\x70\x66\x2f\xe7\xae\x80\xe5\x8d\
\x95\x62\x70\x66\xe7\xa8\x8b\xe5\xba\x8f\x2f\x74\x72\x61\x63\x65\x2e\x63\0\x69\
\x6e\x74\x20\x63\x6f\x75\x6e\x74\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x28\
\x76\x6f\x69\x64\x20\x2a\x63\x74\x78\x29\x20\x7b\0\x20\x20\x20\x20\x5f\x5f\x75\
\x33\x32\x20\x6b\x65\x79\x20\x3d\x20\x30\x3b\0\x20\x20\x20\x20\x76\x61\x6c\x75\
\x65\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\
\x65\x6c\x65\x6d\x28\x26\x73\x79\x73\x63\x61\x6c\x6c\x5f\x63\x6f\x75\x6e\x74\
\x5f\x6d\x61\x70\x2c\x20\x26\x6b\x65\x79\x29\x3b\0\x20\x20\x20\x20\x69\x66\x20\
\x28\x76\x61\x6c\x75\x65\x29\x20\x7b\0\x20\x20\x20\x20\x20\x20\x20\x20\x5f\x5f\
\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\x6e\x64\x5f\x61\x64\x64\x28\
\x76\x61\x6c\x75\x65\x2c\x20\x31\x29\x3b\0\x20\x20\x20\x20\x72\x65\x74\x75\x72\
\x6e\x20\x30\x3b\0\x63\x68\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x6d\x61\
\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\
\0\0\x14\0\0\0\x6c\0\0\0\x80\0\0\0\0\0\0\0\x08\0\0\0\x86\0\0\0\x01\0\0\0\0\0\0\
\0\x11\0\0\0\x10\0\0\0\x86\0\0\0\x06\0\0\0\0\0\0\0\xa4\0\0\0\xcf\0\0\0\0\xa4\0\
\0\x08\0\0\0\xa4\0\0\0\xf0\0\0\0\x0b\xa8\0\0\x20\0\0\0\xa4\0\0\0\x03\x01\0\0\
\x0d\xb4\0\0\x38\0\0\0\xa4\0\0\0\x3e\x01\0\0\x09\xb8\0\0\x48\0\0\0\xa4\0\0\0\
\x4f\x01\0\0\x09\xbc\0\0\x50\0\0\0\xa4\0\0\0\x77\x01\0\0\x05\xc4\0\0\x0c\0\0\0\
\xff\xff\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x60\0\0\0\0\0\0\0\x9b\0\0\0\x05\0\x08\0\x69\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\
\x01\x01\x01\x01\0\0\0\x01\0\0\x01\x01\x01\x1f\x03\0\0\0\0\x23\0\0\0\x3c\0\0\0\
\x03\x01\x1f\x02\x0f\x05\x1e\x03\x4d\0\0\0\0\xd5\xbb\x5f\x57\x15\xd0\xd5\x6a\
\xe8\x71\x6e\x4d\x21\x76\x1a\x52\x55\0\0\0\x01\xb8\x10\xf2\x70\x73\x3e\x10\x63\
\x19\xb6\x7e\xf5\x12\xc6\x24\x6e\x60\0\0\0\x02\x09\xcf\xcd\x71\x69\xc2\x4b\xec\
\x44\x8f\x30\x58\x2e\x8c\x6d\xb9\x04\0\0\x09\x02\0\0\0\0\0\0\0\0\x03\x28\x01\
\x05\x0b\x0a\x21\x05\x0d\x3f\x05\x09\x3d\x06\x03\x52\x20\x06\x03\x2f\x20\x05\
\x05\x22\x02\x02\0\x01\x01\x2f\x68\x6f\x6d\x65\x2f\x63\x61\x69\x6e\x69\x61\x6f\
\x2f\x45\x62\x70\x66\x2f\xe7\xae\x80\xe5\x8d\x95\x62\x70\x66\xe7\xa8\x8b\xe5\
\xba\x8f\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x61\x73\x6d\x2d\
\x67\x65\x6e\x65\x72\x69\x63\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\
\x2f\x62\x70\x66\0\x74\x72\x61\x63\x65\x2e\x63\0\x69\x6e\x74\x2d\x6c\x6c\x36\
\x34\x2e\x68\0\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\x72\x5f\x64\x65\x66\x73\x2e\
\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\x01\0\
\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x2e\x01\0\0\0\0\x03\0\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x08\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x03\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0e\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x03\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x18\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x6a\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x60\0\0\0\0\0\
\0\0\xac\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x26\x01\0\0\x11\0\
\x06\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\
\x08\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x11\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\
\x15\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x1f\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\
\x23\0\0\0\0\0\0\0\x03\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x0c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x14\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x1c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x24\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x2c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x34\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x3c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x44\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x48\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x4c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x50\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x08\0\0\0\0\0\0\0\x02\0\0\0\x0e\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x0d\0\0\0\
\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x90\x01\0\0\0\0\0\0\x04\0\0\0\x0d\0\0\0\
\xa8\x01\0\0\0\0\0\0\x04\0\0\0\x0e\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x60\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x80\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x14\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\
\x22\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x26\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\
\x2a\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x36\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\
\x4b\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x60\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\
\x7a\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0c\x0d\x0e\0\x2e\x64\x65\x62\x75\x67\
\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\
\x54\x46\x2e\x65\x78\x74\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x6f\x63\x6c\x69\x73\
\x74\x73\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\x5f\x6f\x66\
\x66\x73\x65\x74\x73\0\x2e\x6d\x61\x70\x73\0\x2e\x64\x65\x62\x75\x67\x5f\x73\
\x74\x72\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\x5f\x73\x74\x72\0\x63\
\x6f\x75\x6e\x74\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x2e\x72\x65\x6c\x74\
\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\
\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\
\x5f\x61\x64\x64\x72\0\x73\x79\x73\x63\x61\x6c\x6c\x5f\x63\x6f\x75\x6e\x74\x5f\
\x6d\x61\x70\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\
\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x6c\x69\x63\x65\x6e\x73\
\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\0\x2e\x72\
\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\0\x74\x72\x61\x63\x65\
\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\
\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x30\x5f\
\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0d\x01\0\0\x03\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc3\x0d\0\0\0\0\0\0\x35\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x7e\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x40\0\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x7a\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x0a\0\0\0\
\0\0\0\x10\0\0\0\0\0\0\0\x1a\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x49\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\0\0\0\0\0\0\0\x20\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdc\0\0\0\x01\
\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xc4\0\0\0\0\0\0\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xda\0\0\0\0\0\0\0\xed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xc2\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc7\x01\0\0\0\
\0\0\0\x14\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xbe\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x0a\0\0\0\0\0\0\x50\
\0\0\0\0\0\0\0\x1a\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x36\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x02\0\0\0\0\0\0\x54\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x32\0\0\0\x09\0\0\0\x40\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x0b\0\0\0\0\0\0\x30\x01\0\0\0\0\0\0\x1a\0\0\
\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x4f\0\0\0\x01\0\0\0\x30\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x2f\x03\0\0\0\0\0\0\xf8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\xa0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x27\x04\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x9c\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\
\x0c\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x1a\0\0\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x21\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x04\0\0\
\0\0\0\0\x50\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x1d\x01\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x0c\0\0\0\0\0\0\
\x20\0\0\0\0\0\0\0\x1a\0\0\0\x10\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x07\0\0\0\0\0\0\xa0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x0c\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x1a\0\
\0\0\x12\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xf8\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x38\x08\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf4\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x30\x0d\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x1a\0\0\0\x14\0\0\0\x08\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\xe8\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x60\x08\0\0\0\0\0\0\x9f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xe4\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x0d\0\0\0\
\0\0\0\x70\0\0\0\0\0\0\0\x1a\0\0\0\x16\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x5a\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\x08\0\0\0\0\0\0\
\x72\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\xce\0\0\
\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x0d\0\0\0\0\0\0\x03\0\
\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\x01\0\0\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\x09\0\0\0\0\0\0\x68\x01\0\0\0\0\
\0\0\x01\0\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct trace *trace::open(const struct bpf_skelect_open_opts *opts) { return trace__open_opts(opts); }
struct trace *trace::open_and_load() { return trace__open_and_load(); }
int trace::load(struct trace *skel) { return trace__load(skel); }
int trace::attach(struct trace *skel) { return trace__attach(skel); }
void trace::detach(struct trace *skel) { trace__detach(skel); }
void trace::destroy(struct trace *skel) { trace__destroy(skel); }
const void *trace::elf_bytes(size_t *sz) { return trace__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
trace__assert(struct trace *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __TRACE_SKEL_H__ */
